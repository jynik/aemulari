/*******************************************************************************
 * Test the set of round operations performed on a single block
 ******************************************************************************/

#include "start.h"

main:
	add		r1, fp, #test_0
	bl		perform_block_test

    bkpt    #0

/*
 * Perform operations over a single block and verify md5_ctx internal state
 * matches the expected value.
 *
 * Input Parameters:
 *		r1 	-	Pointer to test data (at the associated test_N label)
 */
perform_block_test:
	stmfd	sp!, {r0-r3, lr}

	sub		sp,	#MD5_CTX_SIZE   // Allocate space for md5_ctx
	mov		r0, sp				// r0 = &md5_ctx
	bl		md5_init		    // Initialize md5_ctxz

	mov		r3,	#0

	// Setup initial context state
	ldr		r2, [r1, r3]
    str     r2, [r0, #MD5_CTX_A]
	add		r3, #4
	ldr		r2, [r1, r3]
    str     r2, [r0, #MD5_CTX_B]
	add		r3, #4
	ldr		r2, [r1, r3]
    str     r2, [r0, #MD5_CTX_C]
	add		r3, #4
	ldr		r2, [r1, r3]
    str     r2, [r0, #MD5_CTX_D]
	add		r3, #4

    // Operate on test data pointed to by r3
    bl      process_block

    // Check results (r2) against expected values (r0)

    add     sp, #MD5_CTX_SIZE   // Deallocate md5_ctx from stack mem
	ldmfd	sp!, {r0-r3, pc}

/*******************************************************************************
 * Test vectors
 ******************************************************************************/

.macro test_item_addr n item
	#(test_\n\()_\item - test_\n)
.endm

// Test case 0

test_0:
test_0_a_in:  .word 0x00000000
test_0_b_in:  .word 0xf0f0f0f0
test_0_c_in:  .word 0x0f0f0f0f
test_0_d_in:  .word 0xffffffff

test_0_data:  .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
                    0x00, 0x00, 0x00, 0x00

test_0_a_out: .word 0xce7b387d
test_0_b_out: .word 0x2211c11c
test_0_c_out: .word 0x16733f2b
test_0_d_out: .word 0x29497ed2

// Test case 1

test_1:
test_1_a_in:  .word 0x01234567
test_1_b_in:  .word 0x89abcdef
test_1_c_in:  .word 0x815aa518
test_1_d_in:  .word 0xe77ee77e

test_1_data:  .byte 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, \
                    0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, \
                    0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, \
                    0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, \
                    0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, \
                    0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, \
                    0xa5, 0xa5, 0xa5, 0xa5

test_1_a_out: .word 0x7700c3c3
test_1_b_out: .word 0xb65c0168
test_1_c_out: .word 0x98d7e78e
test_1_d_out: .word 0x98d2a346

// Test case 2

test_2:
test_2_a_in:  .word 0x26a0ef15
test_2_b_in:  .word 0x1ba7014c
test_2_c_in:  .word 0xc45d9db5
test_2_d_in:  .word 0xb83b6faf

test_2_data:  .byte 0x6c, 0x0d, 0x3c, 0xd3, 0x58, 0x35, 0xa6, 0x93, 0xa1, 0xd6, \
                    0x59, 0x1c, 0x11, 0xa6, 0x86, 0x5a, 0x98, 0x47, 0x5a, 0x2a, \
                    0x8a, 0x9c, 0xec, 0xd7, 0x45, 0xa6, 0x62, 0xe3, 0x87, 0x02, \
                    0x47, 0x90, 0x69, 0xce, 0x3b, 0xcf, 0x6f, 0xaa, 0xde, 0xe8, \
                    0x4e, 0x01, 0xf4, 0x32, 0xec, 0x0a, 0x57, 0xb5, 0xe5, 0x3c, \
                    0x94, 0x1f, 0xdb, 0x9b, 0xb3, 0x1e, 0x12, 0xa3, 0xc9, 0x0d, \
                    0x07, 0x7b, 0xc6, 0x1a

test_2_a_out: .word 0xb658dfb7
test_2_b_out: .word 0x49b72a7b
test_2_c_out: .word 0x689c56b7
test_2_d_out: .word 0xd1643630


// Test case 3

test_3:
test_3_a_in:  .word 0xc12ff5c6
test_3_b_in:  .word 0x57ba02d9
test_3_c_in:  .word 0x256ecf18
test_3_d_in:  .word 0x71b11e83

test_3_data:  .byte 0x83, 0x86, 0x69, 0xa4, 0x18, 0xa6, 0x03, 0xed, 0x5a, 0xe1, \
                    0xdd, 0xd6, 0x8a, 0x7b, 0x9d, 0x7d, 0xf8, 0x0f, 0x34, 0x23, \
                    0x08, 0xc5, 0xed, 0x8b, 0x16, 0xbe, 0xbf, 0xc4, 0x75, 0xbc, \
                    0xca, 0x06, 0xd0, 0x38, 0x72, 0xe0, 0x64, 0x6b, 0xe1, 0x41, \
                    0xe3, 0x4c, 0x81, 0x0b, 0x49, 0x45, 0x5d, 0x0c, 0xbe, 0x44, \
                    0x0a, 0x6b, 0x98, 0x2c, 0x8d, 0x74, 0x64, 0xa4, 0x72, 0x3e, \
                    0x40, 0xd8, 0x5d, 0x86

test_3_a_out: .word 0x44b7dae7
test_3_b_out: .word 0xf1722dbd
test_3_c_out: .word 0x2f5c0e6a
test_3_d_out: .word 0xa0a2a961

#include "../md5.S"

